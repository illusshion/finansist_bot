# -*- coding: utf-8 -*-
from __future__ import annotations

from datetime import datetime
from typing import Sequence

from sqlalchemy.ext.asyncio import AsyncSession

from app.repo.reminders import due_reminders, mark_done


def _ensure_naive_utc(dt: datetime) -> datetime:
    """
    –í—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å naive UTC (tzinfo=None), –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –ë–î –∫–æ–ª–æ–Ω–∫–∞
    TIMESTAMP WITHOUT TIME ZONE. –≠—Ç–æ —É–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç aware/naive.
    """
    if dt.tzinfo is not None:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC –∏ —É–±–∏—Ä–∞–µ–º tzinfo
        return dt.astimezone(tz=None).replace(tzinfo=None, microsecond=0)
    return dt.replace(microsecond=0)


async def fire_due_reminders(session: AsyncSession, now: datetime) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö <= now, –ø–æ–º–µ—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏.
    (–û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ: —Å—é–¥–∞ –ª–µ–≥–∫–æ
    –ø—Ä–æ–∫–∏–Ω—É—Ç—å bot –∏ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    now = _ensure_naive_utc(now)

    rows = await due_reminders(session, now)  # type: Sequence
    processed = 0

    for r in rows:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ bot, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
        # if bot is not None:
        #     await bot.send_message(chat_id=<tg_id>, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r.text}")
        await mark_done(session, r.id)
        processed += 1

    return processed
