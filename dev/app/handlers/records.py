# -*- coding: utf-8 -*-
from __future__ import annotations
from datetime import datetime
from zoneinfo import ZoneInfo
import random
import logging

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from app.core.config import settings
from app.core.db import session_scope
from app.repo.users import get_or_create_user
from app.repo.records import add_operation, get_operations_range, delete_operation
from app.services.parser import parse_message
from app.services.periods import parse_free_period   # –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç—ã
from app.services.learning import get_learned_category, save_user_term
from app.ui.ui import kb_pick_category, clean_name, extract_term

log = logging.getLogger(__name__)
router = Router(name=__name__)

# –û—á–µ—Ä–µ–¥—å –æ–±—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤:
# PENDING[user_id] = {
#   "queue": [ {"amount": float, "type": "income|expense", "term": str, "raw": str}, ... ],
#   "msg_id": int | None,     # id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
#   "await_new": False        # –∂–¥—ë–º –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# }
PENDING: dict[int, dict] = {}

CONFIRM_SAVE_VARIANTS = [
    "‚úÖ –ó–∞–ø–∏—Å–∞–ª: ¬´{term}¬ª ({cat}) ‚Äî {sign}{amt:.2f} BYN",
    "‚úÖ –ì–æ—Ç–æ–≤–æ: ¬´{term}¬ª ({cat}) ‚Äî {sign}{amt:.2f} BYN",
    "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª: ¬´{term}¬ª ({cat}) ‚Äî {sign}{amt:.2f} BYN",
]
def pick(arr): return random.choice(arr)

def _today_dates():
    tz = ZoneInfo(settings.tz)
    now = datetime.now(tz)
    d = now.date()
    return d, d

@router.message(Command("records"))
async def cmd_records(m: Message) -> None:
    async with session_scope() as s:
        user = await get_or_create_user(s, m.from_user.id, m.from_user.username)
        start, end = _today_dates()
        ops = await get_operations_range(s, user.id, start, end)

    if not ops:
        await m.answer("üßæ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.", parse_mode="HTML")
        return

    lines = ["üßæ <b>–ó–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>", ""]
    btn_labels: list[tuple[str, int]] = []
    total_exp = total_inc = 0.0
    for o in ops:
        sign = "-" if o.type == "expense" else "+"
        if o.type == "expense":
            total_exp += float(abs(o.amount))
        else:
            total_inc += float(abs(o.amount))
        lines.append(f"{clean_name(o.description or o.category)} ‚Äî {sign}{abs(float(o.amount)):.2f} BYN")
        btn_labels.append((f"üóë {clean_name(o.description or o.category)}", o.id))

    if total_exp > 0 or total_inc > 0:
        lines.append("")
    if total_exp > 0:
        lines.append(f"üíµ <b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b> -{total_exp:.2f} BYN")
    if total_inc > 0:
        lines.append(f"üíµ <b>–ò—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–æ–≤:</b> +{total_inc:.2f} BYN")

    from app.ui.keyboards import deletion_keyboard
    await m.answer("\n".join(lines), parse_mode="HTML",
                   reply_markup=deletion_keyboard(btn_labels) if btn_labels else None)

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É (–≤–∫–ª—é—á–∞—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∏–∫) ===

@router.message(F.text.func(lambda t: bool(t)))
async def free_text(m: Message) -> None:
    uid = m.from_user.id

    # 0) –ï—Å–ª–∏ —ç—Ç–æ —Ñ—Ä–∞–∑–∞ –ø—Ä–æ –æ—Ç—á—ë—Ç—ã ‚Äî –ù–ï —Ç—Ä–æ–≥–∞–µ–º, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç handlers.reports
    if parse_free_period(m.text or ""):
        return

    # 1) –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
    pend = PENDING.get(uid)
    if pend and pend.get("await_new"):
        custom = (m.text or "").strip()
        if not custom:
            await m.answer("–ü—É—Å—Ç–æ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
            return
        await _finalize_current_and_continue(m, chosen_category=custom, learned_now=True)
        return

    text = (m.text or "").strip()
    if not text:
        return

    lines = [s for s in (t.strip() for t in text.splitlines()) if s]

    to_learn_queue: list[dict] = []
    saved: list[str] = []

    async with session_scope() as s:
        user = await get_or_create_user(s, uid, m.from_user.username)

        for line in lines:
            parsed = parse_message(line, user_tg_id=uid)
            if not parsed:
                continue

            term = extract_term(parsed["raw"]) or (parsed["product"] or "").capitalize() or "–ü–æ–∑–∏—Ü–∏—è"

            # –≤—ã—É—á–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ ¬´–ü—Ä–æ—á–µ–µ¬ª
            learned = get_learned_category(uid, term)
            if learned and (not parsed["category"] or parsed["category"] in ("–ü—Ä–æ—á–µ–µ", "–ü—Ä–æ—á–∏–µ –ø–ª–∞—Ç–µ–∂–∏")):
                parsed["category"] = learned

            # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–ø–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
            if (not parsed["category"]) or (parsed["category"] in ("–ü—Ä–æ—á–µ–µ", "–ü—Ä–æ—á–∏–µ –ø–ª–∞—Ç–µ–∂–∏")):
                to_learn_queue.append({
                    "amount": parsed["amount"],
                    "type": parsed["type"],
                    "term": term,
                    "raw": parsed["raw"],
                })
                continue

            # –∏–∑–≤–µ—Å—Ç–Ω—ã–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
            await add_operation(
                session=s,
                user_id=user.id,
                amount=parsed["amount"],
                category=parsed["category"],
                description=parsed["raw"],  # —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞
                op_type=parsed["type"],
            )
            sign = "+" if parsed["type"] == "income" else "-"
            saved.append(f"¬´{term}¬ª ({parsed['category']}) ‚Äî {sign}{parsed['amount']:.2f} BYN")

    # 2) –°–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∞–µ–º –ø—Ä–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (UX ‚Äî —Å–≤–µ—Ä—Ö—É)
    if saved:
        msg = ["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª –∑–∞–ø–∏—Å–µ–π: <b>{}</b>.".format(len(saved))]
        for sline in saved[:10]:
            msg.append("‚Ä¢ " + sline)
        if len(saved) > 10:
            msg.append(f"‚Ä¶ –∏ –µ—â—ë {len(saved) - 10}")
        await m.answer("\n".join(msg), parse_mode="HTML")

    # 3) –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±—É—á–∞—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä
    if to_learn_queue:
        PENDING[uid] = {"queue": to_learn_queue, "msg_id": None, "await_new": False}
        await _ask_next_term(m)
        return

    # 4) –ò–Ω–∞—á–µ ‚Äî –Ω–∏—á–µ–≥–æ –æ–±—É—á–∞—Ç—å, –≤—Å—ë –æ–∫
    if not saved:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–µ–¥–∞ 10¬ª –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å —Å—É–º–º–∞–º–∏.")

async def _ask_next_term(m: Message | CallbackQuery) -> None:
    uid = m.from_user.id
    pend = PENDING.get(uid)
    if not pend or not pend.get("queue"):
        # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        text = "–ì–æ—Ç–æ–≤–æ. –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        if isinstance(m, CallbackQuery):
            try:
                await m.message.edit_text(text, parse_mode="HTML", reply_markup=None)
            finally:
                await _safe_answer(m)
        else:
            await m.answer(text, parse_mode="HTML")
        PENDING.pop(uid, None)
        return

    current = pend["queue"][0]
    text = (
        "–Ø –Ω–µ –≤—ã—É—á–∏–ª —Å–ª–æ–≤–æ ¬´{term}¬ª. –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è?\n"
        "–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å —Å–≤–æ—é."
    ).format(term=current["term"])
    kb = kb_pick_category()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: pickcat:<cat>, pickcat:__new__, cancel

    if isinstance(m, CallbackQuery):
        try:
            await m.message.edit_text(text, reply_markup=kb)
            pend["msg_id"] = m.message.message_id
        finally:
            await _safe_answer(m)
    else:
        msg = await m.answer(text, reply_markup=kb)
        pend["msg_id"] = msg.message_id

async def _finalize_current_and_continue(obj: Message | CallbackQuery, *, chosen_category: str, learned_now: bool) -> None:
    uid = obj.from_user.id
    pend = PENDING.get(uid)
    if not pend or not pend.get("queue"):
        if isinstance(obj, CallbackQuery):
            await _safe_answer(obj, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –∑–∞–ø–∏—Å–∏.")
        else:
            await obj.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –∑–∞–ø–∏—Å–∏.")
        return

    current = pend["queue"].pop(0)
    amount, op_type, term, raw = current["amount"], current["type"], current["term"], current["raw"]

    async with session_scope() as s:
        user = await get_or_create_user(s, uid, getattr(obj.from_user, "username", None))
        await add_operation(
            session=s,
            user_id=user.id,
            amount=amount,
            category=chosen_category,
            description=raw,
            op_type=op_type,
        )
        if learned_now:
            save_user_term(uid, term, chosen_category)

    sign = "+" if op_type == "income" else "-"
    text = pick(CONFIRM_SAVE_VARIANTS).format(term=term, cat=chosen_category, sign=sign, amt=amount)

    if isinstance(obj, CallbackQuery):
        try:
            await obj.message.edit_text(text, parse_mode="HTML")
        finally:
            await _safe_answer(obj, "–ì–æ—Ç–æ–≤–æ")
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ
        await _ask_next_term(obj)
    else:
        await obj.answer(text, parse_mode="HTML")
        await _ask_next_term(obj)

# ==== Callbacks ====

async def _safe_answer(c: CallbackQuery, text: str | None = None):
    try:
        await c.answer(text or "")
    except Exception as e:
        log.debug("callback answer suppressed: %s", e)

# –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
@router.callback_query(F.data == "cancel")
async def cb_cancel(c: CallbackQuery):
    PENDING.pop(c.from_user.id, None)
    try:
        await c.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∏—á–µ–≥–æ –Ω–µ –æ–±—É—á–∞–ª –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç—Ä–æ–∫.", reply_markup=None)
    finally:
        await _safe_answer(c, "OK")

# –ö–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é‚Ä¶¬ª (pickcat:__new__)
@router.callback_query(F.data == "pickcat:__new__")
async def cb_add_custom(c: CallbackQuery):
    uid = c.from_user.id
    pend = PENDING.setdefault(uid, {})
    pend["await_new"] = True
    try:
        await c.message.edit_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞. –ü–æ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏–º.")
    finally:
        await _safe_answer(c)

# –í—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: pickcat:<–∏–º—è>
@router.callback_query(F.data.startswith("pickcat:"))
async def cb_pick_category(c: CallbackQuery):
    data = (c.data or "")
    if data in ("pickcat:__new__",):
        # —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç cb_add_custom
        await _safe_answer(c)
        return

    chosen = data[len("pickcat:"):]
    if not chosen:
        await _safe_answer(c, "–û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return

    await _finalize_current_and_continue(c, chosen_category=chosen, learned_now=True)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–∫–Ω–æ–ø–∫–∏ –∏–∑ /records)
@router.callback_query(F.data.startswith("del:"))
async def cb_delete(c: CallbackQuery):
    try:
        rec_id = int((c.data or "")[4:])
    except Exception:
        await _safe_answer(c, "–û—à–∏–±–∫–∞ id")
        return

    async with session_scope() as s:
        await delete_operation(s, rec_id)

    try:
        await c.message.edit_text("–£–¥–∞–ª–µ–Ω–æ.", reply_markup=None)
    finally:
        await _safe_answer(c, "OK")
