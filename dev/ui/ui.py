# -*- coding: utf-8 -*-
# app/ui/ui.py
from __future__ import annotations
import re
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====

def kb_summary(df: str, dt: str, has_any: bool) -> InlineKeyboardMarkup | None:
    if not has_any:
        return None
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"details:{df}:{dt}")]]
    )

def kb_details(ops_labels, df: str, dt: str) -> InlineKeyboardMarkup:
    rows, row = [], []
    for label, op_id in ops_labels:
        row.append(InlineKeyboardButton(text=f"üóë {label}", callback_data=f"del:{op_id}:{df}:{dt}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close:{df}:{dt}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_pick_category() -> InlineKeyboardMarkup:
    cats = [
        "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏","–ê–ª–∫–æ–≥–æ–ª—å","–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç","–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
        "–ü–æ–¥–ø–∏—Å–∫–∏","–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏","–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "–î–æ–º–∞—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã","–ó–¥–æ—Ä–æ–≤—å–µ","–û–¥–µ–∂–¥–∞","–ü—Ä–æ—á–∏–µ –ø–ª–∞—Ç–µ–∂–∏","–î–æ—Ö–æ–¥"
    ]
    rows, row = [], []
    for c in cats:
        row.append(InlineKeyboardButton(text=c, callback_data=f"pickcat:{c}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é‚Ä¶", callback_data="pickcat:__new__")])
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ===== –£—Ç–∏–ª–∏—Ç—ã –∏–º–µ–Ω/—Ç–µ—Ä–º–∏–Ω–æ–≤ =====

_STOP_WORDS = {
    "–ø–æ—Ç—Ä–∞—Ç–∏–ª","–ø–æ—Ç—Ä–∞—Ç–∏–ª–∞","–∫—É–ø–∏–ª","–∫—É–ø–∏–ª–∞","–æ–ø–ª–∞—Ç–∏–ª","–æ–ø–ª–∞—Ç–∏–ª–∞","–∑–∞–ø–ª–∞—Ç–∏–ª","–∑–∞–ø–ª–∞—Ç–∏–ª–∞",
    "–≤—á–µ—Ä–∞","—Å–µ–≥–æ–¥–Ω—è","–Ω–∞","–ø–æ","–∑–∞","‚Äî","-","+",
    "—Ä—É–±","—Ä—É–±.","byn","—Ä","—Ä.","–±—Ä","usd","eur","‚ÇΩ","$","‚Ç¨"
}

def extract_term(text: str) -> str:
    """–í–µ—Ä–Ω—ë—Ç —Ç–µ—Ä–º 1‚Äì3 —Å–ª–æ–≤–∞ —Å –±—É–∫–≤–∞–º–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å—É–º–º—ã/–≤–∞–ª—é—Ç—ã/—Å–ª—É–∂–µ–±–Ω—ã–µ)."""
    if not text:
        return ""
    s = text.lower()
    s = re.sub(r"\b\d+[.,]?\d*\b", " ", s)
    s = re.sub(r"\b(byn|–±—Ä|—Ä\.?|—Ä—É–±\.?|—Ä—É–±|‚ÇΩ|usd|\$|eur|‚Ç¨)\b", " ", s)
    s = re.sub(r"[+‚Äì‚Äî-]", " ", s)
    s = re.sub(r"\s+", " ", s).strip()
    words = [w for w in re.findall(r"[a-z–∞-—è—ë][a-z–∞-—è—ë0-9\-]*", s) if w not in _STOP_WORDS]
    if not words:
        return ""
    return " ".join(w.capitalize() for w in words[:3])

def clean_name(desc: str, fallback: str) -> str:
    """–ò–º—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π: –ø–µ—Ä–≤–æ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å –±—É–∫–≤–∞–º–∏."""
    if not desc:
        return fallback
    m = re.search(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]+[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9\-]*", desc.strip())
    if not m:
        return fallback
    return (m.group(0) or fallback).capitalize()
